BeagleBone Black notes for current Co-op Student

**there's a lot of repetition in this document****

First thing you should do is order 20 or 25 of these that way you can replace them ASAP on the BBB Shield: https://www.digikey.ca/product-detail/en/microchip-technology/MCP4921T-E-MS/MCP4921T-E-MSCT-ND/736001 

Hello this is Bruno, the current co-op student for this semester, here are a few notes about the Beaglebone that are up to date to save
you trouble looking at older versions of the BBB documentation.

*Preliminary information*
- if using PuTTY - > SSH HOST: 192.168.7.2, Port: 22
- login: Debian -> pass: temppwd
- once inside, ssh into lci using "ssh lci@192.168.7.2" the password is "lci1234" no quotes
- using the "ls" command you should find the exploringBB git repository that is referenced inside the giant exploring BBB book on one of 
  the tables in the lab and my BBB_control directory where i keep my initialization scripts for the internet and pins
- for quick permissions you should be using the "sudo su" command and overwriting from there
- you should familiarize yourself with linux commands as soon as possible

- Make sure to run everything as root using the  "sudo su" once you ssh into lci@192.168.7.2

**** BE CAREFUL WITH THE AMOUNT OF VOLTAGE YOU PUT THROUGH THE BBB ****
**** READ THE HOW TO DESTROY YOUR BEAGLEBONE SUBCHAPTER IN THE BOOK FOR MORE INFO ****

1. (BBB Wireless does not have this issue) Hold down the boot button before turning it on if you can't ssh into it normally using PuTTY then try ssh. wait until all the LEDs on 
the USB turn off then release. If you can ssh into it normally then that's fine upon boot.

2. (BBB wireless already connected to UBC visitor) Internet Sharing: if you are using the BBB with the ethernet cable (recommended) here is a link to a video showing you how to 
internet share between your laptop and BBB. https://www.youtube.com/watch?v=D-NEPiZDSx8. You will have to do this everytime you boot the 
BBB. I have also written this as a script on the lci account in the BBB and can execute it to avoid writing a few lines on the shell. 
You will need to reset the internet sharing stuff however.

If you are using the BBB wireless, it is a little bit trickier to connect to the internet. Since all of the UBC wifi require some added 
user login on the browser you will need to use the "connman" commands on linux. I was able to connect to ubcvisitor using this video 
https://www.youtube.com/watch?v=wPy0ldR02Is and by trying to connect through the Unidentified network that appeared on the "network and 
internet" settings in Windows. After that is done, the browser may prompt you to agree to the terms and you should be able to ping 
google or anything online through PuTTY on the BBB

**** updated **** BBB Wireless has access to the internet permanently now so just ping google from the BBB to confirm

3. (Wireless does not have this issue) Sometimes if you dont turn on with the boot button held down, then you might run out of space on the BBB disk because of some weird 
writing issue. it is actually really hard to find answers online for this so try to turn on with the boot button. 

4. The BBB has an hdmi input that you can use on any monitor but if you use the hdmi then you cant use spi1. I have not tested internet 
sharing with this method.

5. Since this is a newer image on the BBB disk, you can configure pins using "config-pin P9.21 spi" for example instead of going through 
/sys/devices/platform/bone_capemgr in the BBB. here is a github repos with all the different modes each pin can have. Warning as some 
pins have only a set of specific functions. https://github.com/beagleboard/bb.org-overlays/blob/master/tools/beaglebone-universal-
io/config-pin


***I have written a script in Linux to configure all the pins after startup in BBB_control on the BBB ***
*** you can run it either after startup or in a C/C++ program that executes the script *** it's labelled "initialize_pins.sh" and it is in the Linux Scripts folder
and run it using "./initialize_pins.sh"

6. Consult the book sometimes but not heavily as it is pretty outdated and the methods they use to configure certain functions for the 
BBB do not work. (such as configuring the pins)

7. a lot of the answers you may find online pertain to older linux images so be aware of when they were written as what would have 
worked then may not work now

8. I have currently disabled the hdmi, you can enable it by commenting out the disable_uboot_overlay_video=1 and 
disable_uboot_overlay_audio=1

9. If you are trying to use pwm , you have to echo the duty cycle and period before enabling the pwm ie. 

echo 1000 > duty_cycle
echo 2000 > period
echo 1 > enable

or you can use python to do it for you, I have a test program in the 'BBB Python' folder

10. You can access pins using Python as well using Adafruit_BBIO library on Python, I have a github repository with my Python code for 
some projects.

11. if you get denied access when running any of the initialization scripts that i setup. Type in "sudo su" on the client which will 
prompt you for a password and then run the script. Same applies when running Python programs.

13. GitHub: if you have any difficulty pushing changes to git through the beaglebone black because of the TLS connection, i suggest you 
download WinSCP so you can transfer files from the Beaglebone to the Desktop. Host name: lci@192.168.7.2, User name: lci , password: 
lci1234 and then locate the files from the beaglebone to copy onto your desktop then commit your changes thorugh your desktop using bash 
or any other manner.


USING THE BBB PCB SHIELD THAT INTERACTS WITH THE WHEELCHAIR

1. it is vital that you make sure you mount the shield correctly on the beaglebone as one pin mismatch may fry the board. I have not 
tested it yet but I wouldn't try either

2. the PCB shield is comprised of 2 subsystems. One for reading joystick values into the the BBB's ADC pins, Pins 33 and 35, and 
one of the systems for sending voltages through the BBB's SPI Pins into the DACs and the OP AMP which go directly into the OMNI. The 
voltages sent through the OMNI should be within the range of 0-12 volts with ~6 volts being the center reference point (5.8 or 5.9 on the
multimeter) P1 and P2 pins on the PCB should be used for the emergency stop. 

3. the sample code I have written for the BBB is in the folder named 'BBB Python'. The files in there have preliminary 
code to interact with certain features of the BBB shield. 

You are welcome to change any of the files and write your own tests

BBB_GPIO.py -> lights up the hex display on the BBB (The hex display on the current one has a missing resistor so it might not work.
BBB_ADC.py -> utilizes the ADC and prints out values on the shell
BBB_SPI.py -> uses both SPI masters to send signals to the DACs and OP AMPs which go directly to the wheelchair -> I use this if i want 
to test small wheelchair movements. Make sure to center your values through the code as it is reliant on it heavily. You can measure
the outputs going to the wheelchair by probing Ground and the left joint of the '182' resistors using a multimeter. it does need to be 
centered first. The write4921 function is probably the most useful thing in this file because it allows us to write into the DACs 
through the SPI pins on the BBB 
BBB_PWM.py -> controls the pwm pins of the BBB. Refer to the pinout of the BeagleBone Black to see which SPI pins are used or look 
in the code
control_trial.py -> probably unfinished but it was my attempt at controlling the wheelchair with all the files previously mentioned. You 
should try to write a newer version of it in the near future that will utilize the calibration button ('CLB' button on the PCB) so that
whenever it is pushed, it will attempt to center the joystick and read its max and min values.

*****
Your task for this semester is to write your version of a control test using the BBB and ROS to operate the wheelchair with a joystick or 
bluetooth. I have the schematics of the PCB in another folder which should have a PDF named PCB_DAC.pdf which will help you get 
familiarized with all the pin configurations to control the WC. 

If you need to send the BBB PCB shield to be remade, I have also included the gerber files in a .zip folder in the 'Wheelchair' Folder 
for you to send directly to a manufacturer. I personally use JLC PCB for the manufacturing.

*****

OMNI errors can be found in the R-net OMNI Technical Manual


***** HARDWARE *******

In the blue bag labelled 'good', I have left one working BBB Shield for you to interact with the wheelchair, the led hex display is fidgetty and might need replacement but i 
would not worry about it for the moment. (it has a loose 330 ohm resistor on the bottom, there's spares in the digikey box)

The other BBB shields in the bag labelled 'Need DAC replacement' and the shields that need a DAC replacement of the MCP4921 chips because I accidentally fried them when I was 
probing them trying to figure out a configuration problem with the beaglebone. They are very sensitive devices so be careful. The replacement mcp4921 chips will need to be 
ordered via digikey by way of Ian so add them to the cart. Here is the digikey link to it:

 https://www.digikey.ca/product-detail/en/microchip-technology/MCP4921T-E-MS/MCP4921T-E-MSCT-ND/736001

these chips will need to be replaced by you or me using a heat gun which is conveniently located in rusty hut 120 and replaced using solder paste and the same heat gun. If you 
need help then I can solder them for you.

PROBING WHILE ON

one of the few times you will probably have to probe the circuit while it's on is to check the output of the DACs or the voltage going into the wheelchair. I have put blue 
tape over the DACs on the one shield that is working because if you probe any of the pins on them there is a chance they will short (because they are very small pieces with 
thin connections). You can probe their outputs of the DACS by probing the via (hole) directly above the left DAC and ground or for the other DAC, probe the bottom right pin of
the OP-amp and ground. Using the BBB_SPI.py code with the shield mounted, the probes should read around 1.01 volts at the outputs in the beginning. To probe output going into 
the wheelchair, probe the top part of the 1.8k resistors (the ones that are completely black on the working one) and ground. 

THE CLB BUTTON

The CLB button is yours to program. I was going to use it as a calibration button to center the joystick when the wheelchair 
was connected so you can do that too if you wish.

P1 AND P2

p1 and p2 are supposed  be emergency brake pins so short one of them while the wheelchair is on to trigger a brake.

POWER

Power LED indicates that the shield is turned on

TX LED

TX LED is up to you to configure if you want to make it blink when you are sending data to the DAC. It is a regular 
GPIO pin so you can turn it on or off when you transmit a SPI message to the DACs.



if you have any other questions please send me a message. 





Vim commands

Main

Esc  Gets out of the current mode into the “command mode”. All keys are bound 
     of commands.
i	“Insert mode” for inserting text. Keys behave as expected.
:	“Last-line mode” where Vim expects you to enter a command such as to save the document.

Navigation Keys
h	moves the cursor one character to the left.
j or Ctrl + J	moves the cursor down one line.
k or Ctrl + P	moves the cursor up one line.
l	moves the cursor one character to the right.
0	moves the cursor to the beginning of the line.
$	moves the cursor to the end of the line.
^	moves the cursor to the first non-empty character of the line
w	move forward one word (next alphanumeric word)
W	move forward one word (delimited by a white space)
5w	move forward five words
b	move backward one word (previous alphanumeric word)
B	move backward one word (delimited by a white space)
5b	move backward five words
G	move to the end of the file

Navigate around the document
(	jumps to the previous sentence
)	jumps to the next sentence
{	jumps to the previous paragraph
}	jumps to the next paragraph
[[	jumps to the previous section
]]	jumps to the next section
[]	jump to the end of the previous section
][	jump to the end of the next section

Insert text
a	Insert text after the cursor
A	Insert text at the end of the line
i	Insert text before the cursor
o	Begin a new line below the cursor
O	Begin a new line above the cursor

Special inserts
:r [filename]	Insert the file [filename] below the cursor
:r ![command]	Execute [command] and insert its output below the cursor

Delete text
x	delete character at cursor
dw	delete a word.
d0	delete to the beginning of a line.
d$	delete to the end of a line.
d)	delete to the end of sentence.
dgg	delete to the beginning of the file.
dG	delete to the end of the file.
dd	delete line
3dd	delete three lines

Simple replace text
r{text}	Replace the character under the cursor with {text}
R	Replace characters instead of inserting them
 	
Copy/Paste text
yy	copy current line into storage buffer
["x]yy	Copy the current lines into register x
p	paste storage buffer after current line
P	paste storage buffer before current line
["x]p	paste from register x after current line
["x]P	paste from register x before current line
 	
Undo/Redo operation
u	undo the last operation.
Ctrl+r	redo the last undo.
 	
Search and Replace keys
/search_text	search document for search_text going forward
?search_text	search document for search_text going backward
n	move to the next instance of the result from the search
N	move to the previous instance of the result
:%s/original/replacement	Search for the first occurrence of the string “original” and replace it with “replacement”
:%s/original/replacement/g	Search and replace all occurrences of the string “original” with “replacement”
:%s/original/replacement/gc	Search for all occurrences of the string “original” but ask for confirmation before replacing them with “replacement”
 	
Bookmarks
m {a-z A-Z}	Set bookmark {a-z A-Z} at the current cursor position
:marks	List all bookmarks
`{a-z A-Z}	Jumps to the bookmark {a-z A-Z}
 	
Select text
v	Enter visual mode per character
V	Enter visual mode per line
Esc	Exit visual mode
 	 
Modify selected text
~	Switch case
d	delete a word.
c	change
y	yank
>	shift right
<	shift left
!	filter through an external command
 	 
Save and quit
:q	Quits Vim but fails when file has been changed
:w	Save the file
:w new_name	Save the file with the new_name filename
:wq	Save the file and quit Vim.
:q!	Quit Vim without saving the changes to the file.
ZZ	Write file, if modified, and quit Vim
ZQ	Same as :q! Quits Vim without writing changes
